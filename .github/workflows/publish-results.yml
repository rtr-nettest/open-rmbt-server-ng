name: Publish Test Results to Pages

on:
  workflow_run:
    workflows: ["Test on Main Branch"]
    types: [completed]
    branches: [main, test]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results-${{ github.event.workflow_run.head_sha }}
        path: artifacts
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Build results database
      run: |
        echo "Building test results database..."
        
        # Создаем директорию для результатов
        mkdir -p static/results
        
        # Скачиваем существующую базу результатов из репозитория
        if [ -f "static/results/test-results.json" ]; then
          echo "Found existing results database in repository"
          EXISTING_RESULTS=$(cat static/results/test-results.json)
        else
          echo "No existing database, starting fresh"
          EXISTING_RESULTS="[]"
        fi
        
        # Читаем новые результаты
        if [ -f "artifacts/test_results.json" ]; then
          echo "Found new test results, updating database..."
          NEW_RESULTS=$(cat artifacts/test_results.json)
          
          # Добавляем новые результаты в начало массива
          UPDATED_RESULTS=$(echo "$EXISTING_RESULTS" | jq --argjson new "$NEW_RESULTS" '[$new] + .')
          
          # Сохраняем обновленную базу
          echo "$UPDATED_RESULTS" > static/results/test-results.json
          
          # Показываем статистику
          TOTAL_RESULTS=$(echo "$UPDATED_RESULTS" | jq length)
          echo "Database updated successfully"
          echo "Total results in database: $TOTAL_RESULTS"
          
          if [ $TOTAL_RESULTS -gt 0 ]; then
            echo "Latest result:"
            echo "$UPDATED_RESULTS" | jq '.[0] | "\(.timestamp) - Ping: \(.ping)ms, Download: \(.download)Gbps, Upload: \(.upload)Gbps"'
          fi
          
        else
          echo "No new results found, keeping existing database"
          cp static/results/test-results.json static/results/test-results.json
        fi
        
        echo "Results database built successfully"
        
        # Создаем API endpoint для получения результатов
        mkdir -p static/api
        
        # Создаем простой API endpoint
        cat > static/api/test-results << 'EOF'
#!/bin/bash
echo "Content-Type: application/json"
echo "Access-Control-Allow-Origin: *"
echo "Access-Control-Allow-Methods: GET, OPTIONS"
echo "Access-Control-Allow-Headers: Content-Type"
echo ""

if [ "$REQUEST_METHOD" = "OPTIONS" ]; then
    exit 0
fi

if [ -f "../results/test-results.json" ]; then
    cat "../results/test-results.json"
else
    echo "[]"
fi
EOF
        
        chmod +x static/api/test-results
        
        echo "Results database built successfully"
        
    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: static
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Update README with latest results
      run: |
        echo "Updating README with latest test results..."
        
        # Получаем последние результаты
        if [ -f "static/results/test-results.json" ]; then
          LATEST_RESULTS=$(cat static/results/test-results.json | jq '.[0]')
          
          if [ "$LATEST_RESULTS" != "null" ]; then
            PING=$(echo "$LATEST_RESULTS" | jq -r '.ping')
            DOWNLOAD=$(echo "$LATEST_RESULTS" | jq -r '.download')
            UPLOAD=$(echo "$LATEST_RESULTS" | jq -r '.upload')
            COMMIT_HASH=$(echo "$LATEST_RESULTS" | jq -r '.commit_hash')
            TIMESTAMP=$(echo "$LATEST_RESULTS" | jq -r '.timestamp')
            
            # Обновляем README.md
            if [ -f "README.md" ]; then
              # Создаем backup
              cp README.md README.md.backup
              
              # Обновляем секцию с результатами тестов
              sed -i '/## 🧪 Latest Test Results/,/^##/c\
## 🧪 Latest Test Results\
\
**Last Test:** `'"$TIMESTAMP"'`\
**Commit:** [`'"${COMMIT_HASH:0:8}"'`](https://github.com/${{ github.repository }}/commit/'"$COMMIT_HASH"')\
\
| Metric | Value |
|--------|-------|\
| 🎯 Ping | '"$PING"' ms |
| ⬇️ Download | '"$DOWNLOAD"' Gbps |
| ⬆️ Upload | '"$UPLOAD"' Gbps |\
\
📊 [View Full Test History](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-results.html)\
' README.md
              
              echo "README updated with latest test results"
            fi
          fi
        fi
