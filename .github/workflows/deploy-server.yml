name: Deploy Nettest Server

on:
  push:
    branches: [ parser_update ]

  workflow_dispatch:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
    - name: Generate deployment matrix
      id: generate
      run: |
        # Читаем конфигурацию хостов из переменной
        echo "Loading hosts config..."
        HOSTS_CONF_ENV="${{ secrets.HOSTS_CONFIG_ENV }}"
        
        # Создаем JSON массив для matrix
        MATRIX='['
        FIRST=true
        
        # Извлекаем IP адреса из конфигурации
        echo "Extracting IP addresses..."
        IP_ADDRESSES=$(grep -E "^[[:space:]]*[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$" <<< "$HOSTS_CONF_ENV" | sed 's/^[[:space:]]*//' | tr '\n' ' ' | sed 's/ $//')
        
        if [ -z "$IP_ADDRESSES" ]; then
          echo "ERROR: No IP addresses found in HOSTS_CONF_ENV"
          echo "HOSTS_CONF_ENV content:"
          echo "$HOSTS_CONF_ENV"
          exit 1
        fi
        
        
        for IP in $IP_ADDRESSES; do
          if [ "$FIRST" = true ]; then
            FIRST=false
          else
            MATRIX="$MATRIX,"
          fi
          
          MATRIX="$MATRIX{\"host\":\"$IP\"}"
        done
        
        MATRIX="$MATRIX]"
        
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        

  deploy:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Debug matrix
      run: |
        echo "=== DEBUG: Matrix in deploy job ==="
        echo "matrix.host: '${{ matrix.host }}'"
        echo "matrix context: ${{ toJSON(matrix) }}"
        echo "needs.generate-matrix.outputs.matrix: '${{ needs.generate-matrix.outputs.matrix }}'"
        
        # Дополнительная отладка
        echo "=== Additional Debug Info ==="
        echo "Matrix content: ${{ needs.generate-matrix.outputs.matrix }}"
        
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ matrix.host }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        debug: false
        script: |
          # set -e
          echo "Deploying to server: ${{ matrix.host }}"
          echo "Configuration loaded successfully"
          
          # Создаем конфигурационный файл
          echo "Creating /etc/nettest.conf..."
          
          # Извлекаем конфигурацию для конкретного сервера из HOSTS_CONF_ENV
          HOSTS_CONFIG="${{ secrets.HOSTS_CONFIG_ENV }}"
          
          # Создаем временный файл с конфигурацией (используем heredoc без подстановки)
          cat > /tmp/server_config.conf << 'CONFIG_EOF'
          $HOSTS_CONFIG
          CONFIG_EOF
          
          # Извлекаем конфигурацию для конкретного IP
          awk -v ip="${{ matrix.host }}" '
          BEGIN { in_config = 0; config_found = 0; }
          /^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/ {
              if ($0 == ip) {
                  in_config = 1;
                  config_found = 1;
                  next;
              } else {
                  in_config = 0;
              }
          }
          /^---$/ {
              # Разделитель между серверами
              in_config = 0;
              next;
          }
          in_config && /^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*=/ {
              # Извлекаем все строки конфигурации
              gsub(/^[[:space:]]*/, "");
              print;
          }
          ' /tmp/server_config.conf > /etc/nettest.conf
          
          # Добавляем пути к сертификатам
          echo "cert_path = \"/root/specure-cd.crt\"" >> /etc/nettest.conf
          echo "key_path = \"/root/specure-cd.key\"" >> /etc/nettest.conf
          
          echo "Configuration file created successfully"
          echo "Content of /etc/nettest.conf:"
          cat /etc/nettest.conf
          
          # Загружаем TLS сертификаты
          echo "Uploading TLS certificates..."
          echo '${{ secrets.PROD_TLS_CERT }}' > /root/specure-cd.crt
          echo '${{ secrets.PROD_TLS_KEY }}' > /root/specure-cd.key
          chmod 600 /root/specure-cd.crt /root/specure-cd.key
          echo "TLS certificates uploaded and secured"
          
          # Продолжаем с деплоем...
          
          echo "Deploying Nettest Server..."
          
          # Определяем версию Debian и выбираем соответствующий релиз
          DEBIAN_VERSION=$(cat /etc/debian_version 2>/dev/null | cut -d. -f1 || echo "0")
          echo "Detected Debian version: $DEBIAN_VERSION"
          
          # Проверяем поддержку версии
          if [ "$DEBIAN_VERSION" -lt 11 ]; then
            echo "ERROR: Debian version $DEBIAN_VERSION is not supported. Minimum required version is 11."
            echo "Please upgrade to Debian 11 or higher."
            exit 1
          elif [ "$DEBIAN_VERSION" -eq 11 ]; then
            NETTEST_URL="https://github.com/specure/nettest/releases/download/latest-debian-11/nettest-debian-11-x86_64.tar.gz"
          elif [ "$DEBIAN_VERSION" -ge 12 ]; then
            # Для версий 12 и выше используем Debian 12
            NETTEST_URL="https://github.com/specure/nettest/releases/download/latest-debian-12/nettest-debian-12-x86_64.tar.gz"
          else
            echo "ERROR: Unable to determine Debian version or unsupported version: $DEBIAN_VERSION"
            exit 1
          fi
          
          echo "Using URL: $NETTEST_URL"
          NEW_BUILD_DIR="/tmp/nettest-new"
          OLD_BUILD_DIR="/tmp/nettest-old"
          CURRENT_BUILD_DIR="/opt/nettest"
          
          echo "Creating directories..."
          mkdir -p $NEW_BUILD_DIR $OLD_BUILD_DIR
          cd $NEW_BUILD_DIR
          
          echo "Downloading build for Debian $DEBIAN_VERSION..."
          wget -q --timeout=30 --tries=3 "$NETTEST_URL" -O nettest.tar.gz
          
          if [ $? -eq 0 ] && [ -f nettest.tar.gz ]; then
            FILE_SIZE=$(stat -c%s nettest.tar.gz 2>/dev/null || echo 0)
            if [ $FILE_SIZE -gt 1048576 ]; then
              echo "Download successful ($(($FILE_SIZE / 1024 / 1024))MB)"
            else
              echo "Download failed - file too small"
              exit 1
            fi
          else
            echo "Download failed"
            exit 1
          fi
          
          echo "Extracting build..."
          tar -tzf nettest.tar.gz > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Invalid archive"
            exit 1
          fi
          
          tar -xzf nettest.tar.gz
          
          if [ ! -f nettest ]; then
            echo "Extraction failed"
            exit 1
          fi
          
          chmod +x nettest
          echo "Build prepared successfully"
          
          echo "Stopping existing process on port 443..."
          # Используем lsof для определения процесса на порту 443
          NETTEST_PID=$(lsof -ti :443 2>/dev/null || echo "")
          
          echo "DEBUG: NETTEST_PID = '$NETTEST_PID'"
          
          if [ ! -z "$NETTEST_PID" ]; then
            echo "Found existing process on port 443 (PID: $NETTEST_PID), stopping..."
            echo "DEBUG: About to run kill -TERM"
            kill -TERM $NETTEST_PID >/dev/null 2>&1 || echo "kill TERM completed"
            echo "DEBUG: kill -TERM completed"
            sleep 3
            
            echo "DEBUG: Checking if process still exists on port 443"
            if lsof -ti :443 >/dev/null 2>&1; then
              echo "Process still running on port 443, force killing..."
              echo "DEBUG: About to run kill -KILL"
              kill -KILL $NETTEST_PID >/dev/null 2>&1 || echo "kill KILL completed"
              echo "DEBUG: kill -KILL completed"
              sleep 2
            fi
            
            echo "DEBUG: Final check if process exists on port 443"
            if lsof -ti :443 >/dev/null 2>&1; then
              echo "Failed to stop process on port 443"
              exit 1
            else
              echo "Process stopped successfully"
            fi
          else
            echo "No existing process found on port 443"
          fi
          
          echo "=== IMMEDIATE DEBUGGING ==="
          echo "Process stopping completed, continuing with deployment..."
          echo "Current directory: $(pwd 2>/dev/null || echo 'failed to get pwd')"
          echo "Current user: $(whoami 2>/dev/null || echo 'failed to get user')"
          echo "Current working directory contents:"
          ls -la 2>/dev/null || echo "Failed to list directory"
          echo "Checking if nettest binary exists: $(ls -la nettest 2>/dev/null || echo 'not found')"
          
          # Убеждаемся что мы в правильной директории
          if [ ! -f nettest ]; then
            echo "Error: nettest binary not found in current directory"
            echo "Directory contents: $(ls -la 2>/dev/null || echo 'failed to list')"
            exit 1
          fi
          
          echo "Nettest binary found, proceeding..."
          echo "=== END IMMEDIATE DEBUGGING ==="
          
          # Проверяем, что порт 443 свободен
          echo "Checking if port 443 is free..."
          if netstat -tuln 2>/dev/null | grep :443 >/dev/null 2>&1; then
            echo "Warning: Port 443 is still in use"
            sleep 2
          else
            echo "Port 443 is free"
          fi
          
          echo "Port check completed, proceeding with backup..."
          
          if [ -d "$CURRENT_BUILD_DIR" ]; then
            echo "Backing up old build..."
            mv $CURRENT_BUILD_DIR $OLD_BUILD_DIR
            echo "Backup completed"
          else
            echo "No existing build to backup"
          fi
          
          echo "Installing new build..."
          mkdir -p $CURRENT_BUILD_DIR
          cp nettest $CURRENT_BUILD_DIR/
          cd $CURRENT_BUILD_DIR
          echo "Build installation completed"
          
          echo "Starting server..."
          nohup ./nettest -s -log info> nettest.log 2>&1 &
          NEW_PID=$!
          
          echo "Waiting for server (PID: $NEW_PID)..."
          
          # Ждем для запуска
          for i in {1..10}; do
            if ps -p $NEW_PID >/dev/null 2>&1; then
              echo "Server started successfully"
              break
            fi
            sleep 1
          done
          
          if ps -p $NEW_PID >/dev/null 2>&1; then
            echo "New server running (PID: $NEW_PID)"
            
            sleep 3
            
            if netstat -tuln 2>/dev/null | grep :443 >/dev/null 2>&1; then
              echo "Port 443 listening"
            else
              echo "Port 443 not listening"
            fi
            
            if [ -d "$OLD_BUILD_DIR" ]; then
              echo "Removing old build..."
              rm -rf $OLD_BUILD_DIR
            fi
            
            rm -rf $NEW_BUILD_DIR
            
            echo "Deployment completed successfully!"
            
          else
            echo "Server failed to start"
            echo "Checking logs:"
            cat $CURRENT_BUILD_DIR/nettest.log 2>/dev/null || echo "No logs"
            
            echo "Removing failed build..."
            rm -rf $CURRENT_BUILD_DIR $NEW_BUILD_DIR
            
            if [ -d "$OLD_BUILD_DIR" ]; then
              echo "Restoring old build..."
              mv $OLD_BUILD_DIR $CURRENT_BUILD_DIR
              
              cd $CURRENT_BUILD_DIR
              nohup ./nettest -s > nettest.log 2>&1 &
              OLD_PID=$!
              
              sleep 3
              if ps -p $OLD_PID >/dev/null 2>&1; then
                echo "Old server restored (PID: $OLD_PID)"
              else
                echo "Failed to restore old server"
                exit 1
              fi
            else
              echo "No old build to restore"
              exit 1
            fi
          fi
          
          echo "Final status:"
          ps aux | grep "nettest -s" | grep -v grep 2>/dev/null || echo "No nettest processes"
          netstat -tuln | grep :443 2>/dev/null || echo "Port 443 not listening" 