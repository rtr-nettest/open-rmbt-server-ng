name: Build All Platforms

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.0)'
        required: true
        type: string
        default: '1.0.0'

jobs:
  # Linux x86_64 (Ubuntu 24.04)
  build-linux-x86_64:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev libfontconfig1-dev
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-x86_64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Linux x86_64
      run: |
        cargo build --release --target x86_64-unknown-linux-gnu
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-linux-x86_64-binary
        path: target/x86_64-unknown-linux-gnu/release/nettest

  # Linux aarch64 (Ubuntu 24.04 ARM)
  build-linux-aarch64:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev libfontconfig1-dev
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-arm64-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Linux ARM64
      run: |
        cargo build --release
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-linux-aarch64-binary
        path: target/release/nettest

  # Windows x86_64
  build-windows-x86_64:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc
        override: true
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-x86_64-pc-windows-msvc-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Windows x86_64
      run: |
        cargo build --release --target x86_64-pc-windows-msvc
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-windows-x86_64-binary
        path: target/x86_64-pc-windows-msvc/release/nettest.exe

  # Windows aarch64
  build-windows-aarch64:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-pc-windows-msvc
        override: true
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-aarch64-pc-windows-msvc-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Windows ARM64
      run: |
        cargo build --release --target aarch64-pc-windows-msvc
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-windows-aarch64-binary
        path: target/aarch64-pc-windows-msvc/release/nettest.exe

  # macOS x86_64 (Intel)
  build-macos-x86_64:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-apple-darwin
        override: true
        
    - name: Install system dependencies
      run: |
        brew install pkg-config openssl fontconfig
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-x86_64-apple-darwin-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for macOS Intel
      env:
        PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
      run: |
        cargo build --release --target x86_64-apple-darwin
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-macos-x86_64-binary
        path: target/x86_64-apple-darwin/release/nettest

  # macOS aarch64 (Apple Silicon)
  build-macos-aarch64:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-apple-darwin
        override: true
        
    - name: Install system dependencies
      run: |
        brew install pkg-config openssl fontconfig
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-aarch64-apple-darwin-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for macOS Apple Silicon
      env:
        PKG_CONFIG_PATH: /opt/homebrew/lib/pkgconfig
      run: |
        cargo build --release --target aarch64-apple-darwin
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-macos-aarch64-binary
        path: target/aarch64-apple-darwin/release/nettest

  # Debian 11 x86_64
  build-debian-11-x86_64:
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y curl build-essential pkg-config libssl-dev libfontconfig1-dev
        
    - name: Install Rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Add Rust target
      run: |
        . $HOME/.cargo/env
        rustup target add x86_64-unknown-linux-gnu
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-debian-11-cargo-x86_64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Debian 11 x86_64
      run: |
        . $HOME/.cargo/env
        cargo build --release --target x86_64-unknown-linux-gnu
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-debian-11-x86_64-binary
        path: target/x86_64-unknown-linux-gnu/release/nettest

  # Debian 11 aarch64
  build-debian-11-aarch64:
    runs-on: ubuntu-24.04-arm
    container:
      image: arm64v8/debian:bullseye
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y curl build-essential pkg-config libssl-dev libfontconfig1-dev
        
    - name: Install Rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Add Rust target
      run: |
        . $HOME/.cargo/env
        rustup target add aarch64-unknown-linux-gnu
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-debian-11-cargo-aarch64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Debian 11 ARM64
      run: |
        . $HOME/.cargo/env
        cargo build --release --target aarch64-unknown-linux-gnu
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-debian-11-aarch64-binary
        path: target/aarch64-unknown-linux-gnu/release/nettest

  # Debian 12 x86_64
  build-debian-12-x86_64:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y curl build-essential pkg-config libssl-dev libfontconfig1-dev
        
    - name: Install Rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Add Rust target
      run: |
        . $HOME/.cargo/env
        rustup target add x86_64-unknown-linux-gnu
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-debian-12-cargo-x86_64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Debian 12 x86_64
      run: |
        . $HOME/.cargo/env
        cargo build --release --target x86_64-unknown-linux-gnu
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-debian-12-x86_64-binary
        path: target/x86_64-unknown-linux-gnu/release/nettest

  # Debian 12 aarch64
  build-debian-12-aarch64:
    runs-on: ubuntu-24.04-arm
    container:
      image: arm64v8/debian:bookworm
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y curl build-essential pkg-config libssl-dev libfontconfig1-dev
        
    - name: Install Rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Add Rust target
      run: |
        . $HOME/.cargo/env
        rustup target add aarch64-unknown-linux-gnu
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-debian-12-cargo-aarch64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Debian 12 ARM64
      run: |
        . $HOME/.cargo/env
        cargo build --release --target aarch64-unknown-linux-gnu
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-debian-12-aarch64-binary
        path: target/aarch64-unknown-linux-gnu/release/nettest

  # Ubuntu 22.04 x86_64
  build-ubuntu-22-x86_64:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev libfontconfig1-dev clang
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-ubuntu-22-x86_64-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Ubuntu 22.04 x86_64
      env:
        CFLAGS: "-D_DEFAULT_SOURCE"
        CXXFLAGS: "-D_DEFAULT_SOURCE"
        RUSTFLAGS: "-C link-arg=-Wl,-z,relro,-z,now"
        LIBCLANG_PATH: /usr/lib/llvm-14/lib/libclang.so
      run: |
        cargo build --release
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-ubuntu-22-x86_64-binary
        path: target/release/nettest

  # Ubuntu 22.04 aarch64
  build-ubuntu-22-aarch64:
    runs-on: ubuntu-22.04-arm
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev libfontconfig1-dev build-essential
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-arm64-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build for Ubuntu 22.04 ARM64
      env:
        OPENSSL_DIR: /usr
        OPENSSL_LIB_DIR: /usr/lib/aarch64-linux-gnu
        OPENSSL_INCLUDE_DIR: /usr/include
        CFLAGS: "-D_DEFAULT_SOURCE"
        CXXFLAGS: "-D_DEFAULT_SOURCE"
        RUSTFLAGS: "-C link-arg=-Wl,-z,relro,-z,now"
      run: |
        cargo build --release
        
    - name: Upload binary for release
      uses: actions/upload-artifact@v4
      with:
        name: nettest-ubuntu-22-aarch64-binary
        path: target/release/nettest

  # Create releases for all platforms
  create-all-releases:
    needs: [
      build-linux-x86_64,
      build-linux-aarch64,
      build-windows-x86_64,
      build-windows-aarch64,
      build-macos-x86_64,
      build-macos-aarch64,
      build-debian-11-x86_64,
      build-debian-11-aarch64,
      build-debian-12-x86_64,
      build-debian-12-aarch64,
      build-ubuntu-22-x86_64,
      build-ubuntu-22-aarch64
    ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download all binaries
      uses: actions/download-artifact@v4
      
    - name: List downloaded files
      run: |
        echo "Listing downloaded files:"
        find . -name "nettest*" -type f | head -20
        
    - name: Create archives with binaries
      run: |
        # Create Linux x86_64 archive
        if [ -f "nettest-linux-x86_64-binary/nettest" ]; then
          cp nettest-linux-x86_64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-linux-x86_64.tar.gz nettest
          rm nettest
        fi
        
        # Create Linux aarch64 archive
        if [ -f "nettest-linux-aarch64-binary/nettest" ]; then
          cp nettest-linux-aarch64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-linux-aarch64.tar.gz nettest
          rm nettest
        fi
        
        # Create Windows x86_64 archive
        if [ -f "nettest-windows-x86_64-binary/nettest.exe" ]; then
          cp nettest-windows-x86_64-binary/nettest.exe nettest.exe
          zip nettest-windows-x86_64.zip nettest.exe
          rm nettest.exe
        fi
        
        # Create Windows aarch64 archive
        if [ -f "nettest-windows-aarch64-binary/nettest.exe" ]; then
          cp nettest-windows-aarch64-binary/nettest.exe nettest.exe
          zip nettest-windows-aarch64.zip nettest.exe
          rm nettest.exe
        fi
        
        # Create macOS x86_64 archive
        if [ -f "nettest-macos-x86_64-binary/nettest" ]; then
          cp nettest-macos-x86_64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-macos-x86_64.tar.gz nettest
          rm nettest
        fi
        
        # Create macOS aarch64 archive
        if [ -f "nettest-macos-aarch64-binary/nettest" ]; then
          cp nettest-macos-aarch64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-macos-aarch64.tar.gz nettest
          rm nettest
        fi
        
        # Create Debian 11 x86_64 archive
        if [ -f "nettest-debian-11-x86_64-binary/nettest" ]; then
          cp nettest-debian-11-x86_64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-debian-11-x86_64.tar.gz nettest
          rm nettest
        fi
        
        # Create Debian 11 aarch64 archive
        if [ -f "nettest-debian-11-aarch64-binary/nettest" ]; then
          cp nettest-debian-11-aarch64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-debian-11-aarch64.tar.gz nettest
          rm nettest
        fi
        
        # Create Debian 12 x86_64 archive
        if [ -f "nettest-debian-12-x86_64-binary/nettest" ]; then
          cp nettest-debian-12-x86_64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-debian-12-x86_64.tar.gz nettest
          rm nettest
        fi
        
        # Create Debian 12 aarch64 archive
        if [ -f "nettest-debian-12-aarch64-binary/nettest" ]; then
          cp nettest-debian-12-aarch64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-debian-12-aarch64.tar.gz nettest
          rm nettest
        fi
        
        # Create Ubuntu 22.04 x86_64 archive
        if [ -f "nettest-ubuntu-22-x86_64-binary/nettest" ]; then
          cp nettest-ubuntu-22-x86_64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-ubuntu-22-x86_64.tar.gz nettest
          rm nettest
        fi
        
        # Create Ubuntu 22.04 aarch64 archive
        if [ -f "nettest-ubuntu-22-aarch64-binary/nettest" ]; then
          cp nettest-ubuntu-22-aarch64-binary/nettest nettest
          chmod +x nettest
          tar -czf nettest-ubuntu-22-aarch64.tar.gz nettest
          rm nettest
        fi
        
    - name: Create versioned release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          ## Release v${{ github.event.inputs.version }}
          
          ### Downloads
          
          #### Linux
          - **Ubuntu 24.04 x86_64**: [nettest-linux-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-linux-x86_64.tar.gz)
          - **Ubuntu 24.04 ARM64**: [nettest-linux-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-linux-aarch64.tar.gz)
          - **Ubuntu 22.04 x86_64**: [nettest-ubuntu-22-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-ubuntu-22-x86_64.tar.gz)
          - **Ubuntu 22.04 ARM64**: [nettest-ubuntu-22-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-ubuntu-22-aarch64.tar.gz)
          
          #### Debian
          - **Debian 12 x86_64**: [nettest-debian-12-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-debian-12-x86_64.tar.gz)
          - **Debian 12 ARM64**: [nettest-debian-12-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-debian-12-aarch64.tar.gz)
          - **Debian 11 x86_64**: [nettest-debian-11-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-debian-11-x86_64.tar.gz)
          - **Debian 11 ARM64**: [nettest-debian-11-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-debian-11-aarch64.tar.gz)
          
          #### macOS
          - **macOS Apple Silicon**: [nettest-macos-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-macos-aarch64.tar.gz)
          - **macOS Intel**: [nettest-macos-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-macos-x86_64.tar.gz)
          
          #### Windows
          - **Windows x86_64**: [nettest-windows-x86_64.zip](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-windows-x86_64.zip)
          - **Windows ARM64**: [nettest-windows-aarch64.zip](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-windows-aarch64.zip)
          
          ### Installation
          
          #### Linux/macOS
          ```bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-<distribution>-<arch>.tar.gz
          tar -xzf nettest-<distribution>-<arch>.tar.gz
          
          # Run
          ./nettest -s  # Server
          ./nettest -c <address>  # Client
          ```
          
          #### Windows
          ```powershell
          # Download and extract
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/nettest-windows-x86_64.zip" -OutFile "nettest-windows-x86_64.zip"
          Expand-Archive -Path "nettest-windows-x86_64.zip" -DestinationPath "."
          
          # Run
          .\nettest.exe -s  # Server
          .\nettest.exe -c <address>  # Client
          ```
        files: |
          nettest-linux-x86_64.tar.gz
          nettest-linux-aarch64.tar.gz
          nettest-windows-x86_64.zip
          nettest-windows-aarch64.zip
          nettest-macos-x86_64.tar.gz
          nettest-macos-aarch64.tar.gz
          nettest-debian-11-x86_64.tar.gz
          nettest-debian-11-aarch64.tar.gz
          nettest-debian-12-x86_64.tar.gz
          nettest-debian-12-aarch64.tar.gz
          nettest-ubuntu-22-x86_64.tar.gz
          nettest-ubuntu-22-aarch64.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}
        overwrite: true
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
